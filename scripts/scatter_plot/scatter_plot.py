from sys import stderr, argv
from StatsComputor import StatsComputor
import pandas as pd
import matplotlib.pyplot as plt


def normalize(val, min_val, max_val):
    """
        This function maps any floating point number to a 0-1 scale.
        Parameters:
        val (float) : Value to map between 0 and 1.
        min_val (float) : Theorical minimal value for val input.
        max_val (float) : Theorical maximal value for val input.
    """
    return (val - min_val) / (max_val - min_val)


def compute_similarity(a, b, sc):
    """
        This function computes a percentage of similarity between two lists of
        numbers, by summing up each difference between all of their elements.
        This leaves a similarity score between 0 and 1, which is multiplied
        by 100 before to be returned.
        Parameters:
        a (list): First feature, represented as a list of floats.
        b (list): Second feature, ______________________________.
        sc (StatsComputor obj): Object used to call class functions.
    """
    a_fc = (sc.compute_min(a), sc.compute_max(a))
    b_fc = (sc.compute_min(b), sc.compute_max(b))

    sym = 0.0
    length = len(a)

    for i in range(length):
        if pd.isna(a[i]) == False and pd.isna(b[i]) == False:
            n_a = normalize(a[i], a_fc[0], a_fc[1])
            n_b = normalize(b[i], b_fc[0], b_fc[1])
            sym += abs(n_a - n_b)

    sym /= length
    return sym * 100.0


def get_similaritys(sc):
    """
        This function builds a dictionary containing all similaritys scores for
        each houses combinations (number_of_houses ** 2 possibilitys).
        Parameters:
        sc (StatsComputor obj): Object containing dataset in a pandas DataFrame.
    """
    similaritys = {}
    for a in sc.df:
        for b in sc.df:
            if a != b:
                similaritys[a + '-' + b] = compute_similarity(sc.df[a].values, sc.df[b].values, sc)
    return similaritys


def get_highest_similarity(similaritys):
    """
        This function gets the highest similarity score by searching in the
        similaritys dictionary generated by get_similaritys.
        Parameters:
        similaritys (dict): Dictionary containing all similaritys scores for
        each houses combinations.
    """
    highest_score = 0.0
    highest_key = ""
    for key in similaritys:
        if similaritys[key] > highest_score:
            highest_score = similaritys[key]
            highest_key = key
    parts = highest_key.split('-')
    return parts[0], parts[1]


def plot_scatter(sc, a_key, b_key):
    """
        This function shows a scatter plot of a and b features content, as x
        and y axis data.
    """
    plt.scatter(x=sc.df[a_key], y=sc.df[b_key], c='red', s=4)
    plt.show()


def main():
    if len(argv) != 2:
        stderr.write("usage: python scatter_plot.py dataset.csv\n")
        exit(1)

    sc = StatsComputor(argv[1])
    similaritys = get_similaritys(sc)
    matiere_a, matiere_b = get_highest_similarity(similaritys)
    #matiere_a, matiere_b = "Flying", "Charms"
    plot_scatter(sc, matiere_a, matiere_b)


if __name__ == "__main__":
    main()
